// Code generated by hertz generator.

package tiktok

import (
	"context"
	"log"
	"net/http"

	"simple-tiktok/biz/dal/db"
	tiktok "simple-tiktok/biz/model/tiktok"
	"simple-tiktok/pkg/consts"
	"simple-tiktok/pkg/errno"

	"github.com/cloudwego/hertz/pkg/app"
)

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktok.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusBadRequest, tiktok.FavoriteActionResponse{
			StatusCode: errno.ParamErr.ErrCode,
			StatusMsg:  &errno.ParamErr.ErrMsg,
		})
		return
	}

	vid := uint(req.VideoID)
	_, err = db.GetVideo(ctx, vid)
	if err != nil {
		log.Printf("查询视频: %v失败: %v\n", vid, err)
		c.JSON(http.StatusBadRequest, tiktok.FavoriteActionResponse{
			StatusCode: errno.ParamErr.ErrCode,
			StatusMsg:  &errno.ParamErr.ErrMsg,
		})
		return
	}

	uid := uint(c.Value(consts.IdentityKeyID).(*tiktok.User).ID)
	switch req.ActionType {
	case consts.LikeVideo:
		err = db.LikeVideo(ctx, uid, vid)
		if err != nil {
			if err != nil {
				log.Printf("用户: %v点赞视频: %v失败: %v\n", uid, vid, err)
				c.JSON(http.StatusInternalServerError, tiktok.FavoriteActionResponse{
					StatusCode: errno.ServiceErr.ErrCode,
					StatusMsg:  &errno.ServiceErr.ErrMsg,
				})
				return
			}
		}
	case consts.UnLikeVideo:
		err = db.UnLikeVideo(ctx, uid, vid)
		if err != nil {
			log.Printf("用户: %v取消点赞视频: %v失败: %v\n", uid, vid, err)
			c.JSON(http.StatusInternalServerError, tiktok.FavoriteActionResponse{
				StatusCode: errno.ServiceErr.ErrCode,
				StatusMsg:  &errno.ServiceErr.ErrMsg,
			})
			return
		}
	}

	c.JSON(http.StatusOK, tiktok.FavoriteActionResponse{
		StatusCode: errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
	})
}

// GetFavoriteList .
// @router /douyin/favorite/list/ [GET]
func GetFavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktok.GetFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusBadRequest, tiktok.GetFavoriteListResponse{
			StatusCode: errno.ParamErr.ErrCode,
			StatusMsg:  &errno.ParamErr.ErrMsg,
		})
		return
	}

	uid := uint(c.Value(consts.IdentityKeyID).(*tiktok.User).ID)
	videos, err := db.GetLikes(ctx, uid)
	if err != nil {
		log.Printf("获取用户: %v的like列表失败: %v\n", uid, err)
		c.JSON(http.StatusBadRequest, tiktok.GetFavoriteListResponse{
			StatusCode: errno.ServiceErr.ErrCode,
			StatusMsg:  &errno.ServiceErr.ErrMsg,
		})
		return
	}

	likes := make([]*tiktok.Video, len(videos))
	for i, video := range videos {
		likes[i] = &tiktok.Video{
			ID:       int64(video.ID),
			Author:   &tiktok.User{},
			PlayURL:  video.Play_url,
			CoverURL: video.Cover_url,
			// FavoriteCount: video.,
			// CommentCount: video.,
			IsFavorite: true,
			Title:      video.Title,
		}
	}

	c.JSON(http.StatusOK, tiktok.GetFavoriteListResponse{
		StatusCode: errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		VideoList:  likes,
	})
}
